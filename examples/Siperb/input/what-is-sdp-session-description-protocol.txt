{
  "url": "https://www.siperb.com/kb/article/what-is-sdp-session-description-protocol/",
  "title": "What is SDP (Session Description Protocol)? - SIPERB WebRTC Softphone",
  "content": "What is SDP (Session Description Protocol)? - SIPERB WebRTC Softphone Menu Home About Features Pricing Resources All Resources Discussion Forum FAQ Screenshots Source Code (GitHub) Support Home SIP Over WebRTC What is SDP (Session Description Protocol)? Search For Search What is SDP (Session Description Protocol)? Contents Purpose of SDP Core Structure of an SDP Message Basic SDP Example Explanation of Fields SDP in WebRTC Key WebRTC-Specific Fields SDP Code Sample for WebRTC in JavaScript Conclusion SDP, or Session Description Protocol, is a format used primarily in multimedia communications and applications to describe the details of media sessions. These sessions often involve real-time protocols like SIP (Session Initiation Protocol) and WebRTC (Web Real-Time Communication) . SDP itself is not a transport protocol; rather, it provides a structured way to describe multimedia data such as audio, video, and application-specific media, facilitating compatibility between communicating devices. Purpose of SDP SDP is mainly designed to communicate: Session Parameters : Details about the multimedia session, like session name, start and end time, and unique session identifiers. Media Description : Specifications of the media (e.g., audio, video, text), including the codecs and formats supported, bandwidth information, and the number of channels. Connection Information : Network details, such as the IP address and port numbers, which are used to set up a connection between endpoints. Core Structure of an SDP Message An SDP message is structured in key-value format, with each line beginning with a single character denoting the type of information, followed by an = sign and then the relevant data. Here\u2019s a breakdown of some of the essential fields: Field Symbol Description Version v= SDP version (always \u201c0\u201d in current specifications) Origin o= Session initiator\u2019s details, including username, session ID, and network address Session Name s= Name of the session Session Information i= Optional field describing the purpose of the session URI u= URL pointing to more details about the session Email Address e= Contact information for the session owner Phone Number p= Contact phone number Connection Information c= Network details, such as IP address and type of network Timing t= Start and end times for the session Media Description m= Media type, port number, protocol, and format Bandwidth b= Bandwidth required or preferred for the session Attributes a= Session or media-level attributes like codecs, encryption, and other session properties Basic SDP Example Let\u2019s start with a simple example of an SDP message describing a multimedia session: v=0\no=- 1234567890 1234567890 IN IP4 192.0.2.1\ns=Example SDP Session\nc=IN IP4 192.0.2.1\nt=0 0\nm=audio 49170 RTP/AVP 0\na=rtpmap:0 PCMU/8000\nm=video 51372 RTP/AVP 31\na=rtpmap:31 H261/90000 Explanation of Fields v=0 : Indicates SDP version 0. o=- 1234567890 1234567890 IN IP4 192.0.2.1 : Defines the origin of the session. The session ID and session version are set to the same value for simplicity, and the IP address is set to 192.0.2.1 . s=Example SDP Session : Names the session. c=IN IP4 192.0.2.1 : Specifies the connection information for the session, setting IP to 192.0.2.1 . t=0 0 : The timing of the session is set to 0 0 , meaning it is unlimited and always available. m=audio 49170 RTP/AVP 0 : Describes an audio media session, using port 49170 with RTP (Real-Time Transport Protocol) and AVP (Audio/Video Profile), using payload type 0 (PCMU codec). a=rtpmap:0 PCMU/8000 : An attribute that maps RTP payload type 0 to PCMU codec operating at 8000 Hz. m=video 51372 RTP/AVP 31 : Describes a video media session, using port 51372 , RTP/AVP profile, and payload type 31 (H.261 codec). a=rtpmap:31 H261/90000 : Maps payload type 31 to H261 codec operating at 90000 Hz. SDP in WebRTC In WebRTC (Web Real-Time Communication), SDP plays a crucial role in peer-to-peer connections, helping devices to negotiate and establish compatible media types and formats. Typically, SDP data is exchanged between peers during the \u201coffer/answer\u201d process. Offer : The initiating peer creates an SDP message containing the details of the media it wishes to send and receive. Answer : The receiving peer returns an SDP message indicating compatible parameters and codecs. Here\u2019s a simple WebRTC SDP example, highlighting key WebRTC-specific attributes: v=0\no=- 4962647797900726170 2 IN IP4 127.0.0.1\ns=WebRTC Session\nt=0 0\na=group:BUNDLE audio video\na=msid-semantic: WMS ARDAMS\nm=audio 9 UDP/TLS/RTP/SAVPF 111 103 104\nc=IN IP4 0.0.0.0\na=rtcp:9 IN IP4 0.0.0.0\na=ice-ufrag:f7g6\na=ice-pwd:asd88fgpdd777uzjYhagZg\na=fingerprint:sha-256 4A:61:21:C0:A5:95:E1:A5:BA:53:56:36:12:7C:84:BB:67:9D:49:50:4C:27:32:1E:19:DA:A2:22:32:BD:5E:3A\na=setup:actpass\na=mid:audio\na=sendrecv\na=rtpmap:111 opus/48000/2\na=rtcp-mux\nm=video 9 UDP/TLS/RTP/SAVPF 96\nc=IN IP4 0.0.0.0\na=rtcp:9 IN IP4 0.0.0.0\na=ice-ufrag:f7g6\na=ice-pwd:asd88fgpdd777uzjYhagZg\na=fingerprint:sha-256 4A:61:21:C0:A5:95:E1:A5:BA:53:56:36:12:7C:84:BB:67:9D:49:50:4C:27:32:1E:19:DA:A2:22:32:BD:5E:3A\na=setup:actpass\na=mid:video\na=sendrecv\na=rtpmap:96 VP8/90000\na=rtcp-mux Key WebRTC-Specific Fields a=group:BUNDLE audio video : The BUNDLE attribute groups multiple media tracks (e.g., audio and video) into a single transport. a=ice-ufrag and a=ice-pwd : ICE (Interactive Connectivity Establishment) credentials used for NAT traversal. a=fingerprint : SHA-256 hash for secure session establishment (DTLS fingerprint). a=setup:actpass : Defines the role of each peer in establishing the secure DTLS connection. a=rtpmap and a=rtcp-mux : Defines RTP mappings and RTP multiplexing to streamline audio and video transport over a single connection. SDP Code Sample for WebRTC in JavaScript Here\u2019s how an SDP offer can be created using WebRTC in JavaScript: const pc = new RTCPeerConnection();\n\nasync function createOffer() {\n    const offer = await pc.createOffer();\n    await pc.setLocalDescription(offer);\n    console.log(\"SDP Offer:\", offer.sdp);\n}\n\n// Add event listener for handling the generated SDP\npc.onicecandidate = (event) => {\n    if (event.candidate) {\n        console.log(\"ICE Candidate:\", event.candidate.candidate);\n    }\n};\n\n// Trigger the function\ncreateOffer(); Conclusion SDP is a foundational protocol for multimedia communication, particularly in real-time systems like WebRTC. It provides a standardized way to describe multimedia content, network details, and session properties, ensuring that communicating devices can understand each other\u2019s capabilities and requirements. Tagged: SDP SIP WebRTC Related Articles Viewing SIP Trace Logs Registration Modes WebRTC to SIP Proxy Softphone: What is and why would you use it? What is STUN? Does WebRTC Leak My IP Address? Contents Purpose of SDP Core Structure of an SDP Message Basic SDP Example Explanation of Fields SDP in WebRTC Key WebRTC-Specific Fields SDP Code Sample for WebRTC in JavaScript Conclusion Popular Articles Understanding SIP Transactions, Dialogs, and Sessions OpenSIPS WebRTC Asterisk WebRTC An Introduction to Connections WebRTC to SIP Proxy \u00a9 Copyright SIPERB . Facebook X (Twitter) LinkedIn YouTube Privacy Policy Terms Of Service"
}
