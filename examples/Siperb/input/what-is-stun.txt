{
  "url": "https://www.siperb.com/kb/article/what-is-stun/",
  "title": "What is STUN? - SIPERB WebRTC Softphone",
  "content": "What is STUN? - SIPERB WebRTC Softphone Menu Home About Features Pricing Resources All Resources Discussion Forum FAQ Screenshots Source Code (GitHub) Support Home SIP Over WebRTC What is STUN? Search For Search What is STUN? Contents How Does STUN Work? STUN vs. TURN STUN in WebRTC Example of a STUN-backed WebRTC Peer Connection Step 1: Setting Up the STUN Server in WebRTC Step 2: Generating and Sharing SDP Step 3: Receiving and Setting the SDP Detailed Breakdown of SDP Example: Adding an ICE Candidate Summary STUN (Session Traversal Utilities for NAT) is a protocol that assists in establishing peer-to-peer (P2P) connections over the Internet, particularly in scenarios involving Network Address Translators (NATs). NATs are devices that map private IP addresses within a local network to public IP addresses on the Internet. This process is helpful for security but poses challenges for direct P2P connections, as devices in different private networks may not easily reach each other. STUN facilitates the discovery of public IP addresses and port mappings, enabling devices behind NATs to establish P2P connections effectively. STUN is a fundamental building block in WebRTC (Web Real-Time Communication), a technology for P2P communications such as audio, video, and data transfer between browsers. How Does STUN Work? When two devices want to establish a P2P connection, each device needs to know: Its own public IP address and port as seen by the Internet. Any NAT or firewall restrictions that could prevent direct communication. A STUN server provides this information by reflecting the device\u2019s request, which is then used to identify the public IP and port mappings assigned by the NAT. This process is commonly referred to as NAT traversal . The typical flow with STUN works as follows: The client contacts a STUN server over the Internet. The server replies with the public IP address and port as seen by the Internet. The client uses this information in its connection request to another peer. STUN vs. TURN STUN works for NAT traversal in most cases. However, when both peers are behind symmetric NATs, STUN alone may not work. TURN (Traversal Using Relays around NAT) servers are used as intermediaries, relaying traffic between peers. TURN is more resource-intensive than STUN and is typically used as a fallback option. STUN in WebRTC WebRTC uses STUN to assist in creating peer-to-peer connections by determining the public-facing IP address of a client. This address is shared with other peers via a Session Description Protocol (SDP) message. The SDP contains information about how the peers can connect, including IP addresses, ports, and connection metadata. Below, we\u2019ll walk through how to set up a simple STUN-backed peer connection using WebRTC and examine the SDP exchange. Example of a STUN-backed WebRTC Peer Connection In this example, we\u2019ll configure a WebRTC peer connection between two clients. We\u2019ll demonstrate how STUN servers are configured in the peer connection and look at the SDP details that are exchanged. Step 1: Setting Up the STUN Server in WebRTC WebRTC\u2019s RTCPeerConnection object supports configuring STUN and TURN servers directly. Here\u2019s how to add a STUN server in JavaScript: const configuration = {\n    iceServers: [\n        { urls: 'stun:stun.l.google.com:19302' }  // Google\u2019s public STUN server\n    ]\n};\n\nconst peerConnection = new RTCPeerConnection(configuration); In this configuration, we use Google\u2019s public STUN server. This will help each client determine its public IP and port. Step 2: Generating and Sharing SDP The process for establishing a connection involves the exchange of SDP (Session Description Protocol) messages. The SDP contains information about how media can be shared between the two peers. Here\u2019s an example of how to create an offer and generate an SDP on the first client: peerConnection.createOffer().then((offer) => {\n    return peerConnection.setLocalDescription(offer);\n}).then(() => {\n    // Send the SDP offer to the other peer via your signaling server\n    console.log(\"SDP Offer: \", peerConnection.localDescription);\n}); This code: Creates an offer. Sets the offer as the local description of the peer connection. Logs the SDP, which you can send to the other peer through a signaling mechanism (e.g., WebSocket, HTTP). Here\u2019s what the generated SDP might look like: v=0\no=- 46117349 2 IN IP4 127.0.0.1\ns=-\nt=0 0\na=group:BUNDLE 0\nm=audio 9 UDP/TLS/RTP/SAVPF 111 103 9\nc=IN IP4 203.0.113.1\na=rtcp:9 IN IP4 0.0.0.0\na=candidate:842163049 1 udp 1677729535 192.168.1.2 62604 typ srflx raddr 192.168.1.2 rport 62604 generation 0\na=ice-ufrag:EjYk\na=ice-pwd:asd88fgpdd777uzjYhagZg\na=fingerprint:sha-256 4F:90:41:59:48:1E:E8:A2:37:23:5A:CD:E3:8E:10:F6:A3:6A:C5:99:EB:FD:45:3B:EC:8A:52:1A:C6:97:DF:5E\n... Step 3: Receiving and Setting the SDP On the receiving peer, set the received SDP as the remote description, then generate an answer to send back. // Assume sdpOffer is the SDP received from the offerer\npeerConnection.setRemoteDescription(new RTCSessionDescription(sdpOffer)).then(() => {\n    return peerConnection.createAnswer();\n}).then((answer) => {\n    return peerConnection.setLocalDescription(answer);\n}).then(() => {\n    // Send the SDP answer back to the offerer\n    console.log(\"SDP Answer: \", peerConnection.localDescription);\n}); This sets up the receiving peer to respond to the initial offer with an SDP answer. Detailed Breakdown of SDP An SDP message consists of several sections: v=0 : SDP version. o= : Origin of the session. s= : Session name. c= : Connection data, like the IP address. m= : Media information (e.g., audio, video). a= : Attributes, including ICE candidates. The ICE candidates ( a=candidate ) specify the IP and port combinations where each peer might be reachable. These candidates are collected with the help of the STUN server. Example: Adding an ICE Candidate When additional ICE candidates are discovered, they are sent to the peer to expand connection possibilities. peerConnection.onicecandidate = (event) => {\n    if (event.candidate) {\n        // Send candidate to the peer\n        console.log(\"New ICE Candidate:\", event.candidate);\n    }\n}; Summary STUN allows devices to discover their public IP address and port mappings, enabling peer-to-peer connections across NATs. SDP is the format used to describe the media and connection setup required to establish a WebRTC session. By configuring STUN servers in RTCPeerConnection , WebRTC applications can collect the necessary ICE candidates to complete NAT traversal. In combination with TURN and signaling servers, STUN is crucial for establishing reliable WebRTC connections across the Internet. Tagged: WebRTC SIP STUN Related Articles Viewing SIP Trace Logs Registration Modes WebRTC to SIP Proxy Softphone: What is and why would you use it? What is SDP (Session Description Protocol)? Does WebRTC Leak My IP Address? Contents How Does STUN Work? STUN vs. TURN STUN in WebRTC Example of a STUN-backed WebRTC Peer Connection Step 1: Setting Up the STUN Server in WebRTC Step 2: Generating and Sharing SDP Step 3: Receiving and Setting the SDP Detailed Breakdown of SDP Example: Adding an ICE Candidate Summary Popular Articles Understanding SIP Transactions, Dialogs, and Sessions OpenSIPS WebRTC Asterisk WebRTC An Introduction to Connections WebRTC to SIP Proxy \u00a9 Copyright SIPERB . Facebook X (Twitter) LinkedIn YouTube Privacy Policy Terms Of Service"
}
